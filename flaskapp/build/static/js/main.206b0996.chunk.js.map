{"version":3,"sources":["components/Constants.js","components/AppContext.js","components/Row.js","components/Card.js","components/CardList.js","components/ActionButtons.js","components/Auth.js","App.js","index.js"],"names":["urls","authScopes","GuruQuery","gql","clickSettings","1","color","icon","2","3","4","5","cardChoices","cs","label","included","pbl","lookml","architecture","dataculture","AppContext","createContext","AppContextProvider","props","useState","cardState","setCardState","reviewType","setReviewType","loggedIn","setLoggedIn","undefined","gClient","setGClient","useEffect","OAuth2Client","process","generateScores","customer_name","tmp","Object","keys","forEach","k","obj","values","rows","map","v","score","reduce","a","b","hasScore","r","tmpScore","tmpRow","cards","customer","setupState","console","log","c","rowtmp","text","notes","title","contextValue","handleOAuthLogIn","res","setCredentials","tokenObj","e","window","alert","error","handleOauthLogOut","revokeCredentials","useMemo","updateRowScore","cardKey","rowKey","val","updateRowNotes","Provider","value","children","Text","styled","div","ScoreBase","span","Notes","Row","useContext","clicks","setClicks","displayNotes","setDisplayNotes","card","name","onChange","target","cols","dangerouslySetInnerHTML","__html","replace","data-text","onClick","calcScores","style","backgroundColor","textDecoration","data","Number","aria-label","role","displayScore","index","Div","Container","Title","Remove","Score","Super","Card","isHidden","setIsHidden","isRemoved","setIsRemoved","setScore","toggleHidden","total","filter","s","score_percent","Math","round","length","alt","type","readOnly","checked","ix","Tip","CardList","useQuery","loading","message","includedCards","indexOf","htmlFor","id","Clear","ActionButtons","generateForCustomer","prompt","cust","postGDocError","msg","save","scores","getRequestHeaders","requestTokenHeaders","headers","fetch","method","body","JSON","stringify","ok","json","resp","confirm","location","reload","rel","href","buttonText","onLogoutSuccess","AuthCard","Auth","marginBottom","clientId","onSuccess","scope","join","onFailure","cookiePolicy","client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","StyledWord","className","slice","AppInner","ApolloProvider","src","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.206b0996.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const urls = {\n  gDrive: \"https://drive.google.com/drive/u/0/folders/1VXtp98I-A8MFdo-wN3iHnYOPYtqh8lTI\",\n  guru: \"https://app.getguru.com/boards/yiKXnGpi/Transcriber\",\n  graphQL: \"https://yu3gypcoyi.execute-api.us-west-2.amazonaws.com/dev/graphql\"\n};\n\nexport const authScopes = [\n  \"https://www.googleapis.com/auth/script.deployments\"\n  ,\"https://www.googleapis.com/auth/pubsub\"\n  ,\"https://www.googleapis.com/auth/drive\"\n  ,\"https://www.googleapis.com/auth/documents\"\n]\n\n// ,\"https://www.googleapis.com/auth/drive.file\"\n\nexport const GuruQuery = gql`\n  query UserQuery {\n    cards(\n      id: [\n        \"iqKnn74T\" # Application Servers (On-Premise)\n        \"ioEzzokT\" # Application Database (On-Premise)\n        \"cAB66Egi\" # Monitoring\n        \"ceXzzbRi\" # Development Process & Environment\n        \"TLKg5Gbc\" # LookML Views\n        \"c8e5bg7i\" # LookML Explores\n        \"iGB6RkXT\" # LookML Models\n        \"T5KnzGqc\" # LookML Projects\n        \"ikEzzkeT\" # Performance\n        \"ckEzzkki\" # Security\n        \"TkEzzk6c\" # Database Connections\n        \"TbXzz78c\" # Data Pipeline\n        \"c5KnnjRi\" # User Enablement\n        \"TqKnnjnc\" # Release Management\n        \"TXrjjBpc\" # Content Management\n        \"inEpreBT\" # Customer Success Top 10\n        \"cbbeybKi\" # Client-Side Performance\n      ]\n    ) {\n      title\n      rows {\n        rowId\n        text\n      }\n      statusCode\n    }\n  }\n`;\n\nexport const clickSettings = {\n  1: {color: '#ff4600', icon: '0️⃣'},\n  2: {color: '#ff8c00', icon: '1️⃣'},\n  3: {color: '#ffd300', icon: '2️⃣'},\n  4: {color: '#e5ff00', icon: '3️⃣'},\n  5: {color: '#9fff00', icon: '4️⃣'},\n}\n\n\nexport const cardChoices = {\n  cs: {\n    label: \"Customer Success\",\n    included: [\"Top 10 Behaviors and Characteristics of Successful Customers\"],\n  },\n  pbl: { label: \"PBL\", included: [\"Client-Side Performance\"] },\n  lookml: {\n    label: \"LookML\",\n    included: [\n      \"Development Process & Environment\",\n      \"Views\",\n      \"Explores\",\n      \"Models\",\n      \"Projects\",\n      \"Performance\",\n      \"Security\",\n      \"Database Connections\",\n      \"Data Pipeline\",\n    ],\n  },\n  architecture: {\n    label: \"On-Premise Architecture\",\n    included: [\n      \"Application Servers (On-Premise)\",\n      \"Application Database (On-Premise)\",\n      \"Monitoring\",\n    ],\n  },\n  dataculture: {\n    label: \"Data Culture\",\n    included: [\"User Enablement\", \"Content Management\", \"Release Management\"],\n  },\n};\n\nexport const logoImg =\n  \"data:image/png;base64, \";\n","import React, { createContext, useState, useMemo, useEffect } from \"react\";\nimport { OAuth2Client } from 'google-auth-library'\nexport const AppContext = createContext()\n\nexport const AppContextProvider = (props) => {\n    const [cardState, setCardState] = useState({})\n    const [reviewType, setReviewType] = useState('lookml')\n    const [loggedIn, setLoggedIn] = useState(false)\n    const [gClient, setGClient] = useState(undefined)\n\n    useEffect(() => {\n        setGClient(new OAuth2Client(process.env.REACT_APP_GCLIENT_ID))\n    }, [])\n\n    const handleOAuthLogIn = async (res) => {\n        try {\n            let tmp = gClient\n            tmp.setCredentials(res.tokenObj)\n            setGClient(tmp)\n            setLoggedIn(true)\n        }\n        catch (e) {\n            window.alert(\"Problem authenticating. See console\")\n            setLoggedIn(false)\n            console.error(e)\n        }\n    }\n\n    const handleOauthLogOut = () => {\n        if (gClient) {\n            let tmp = gClient\n            tmp.revokeCredentials()\n            setGClient(tmp)\n        }\n        setLoggedIn(false)\n    }\n\n    const hasScore = (obj, k) => {\n        return Object.values(obj[k].rows).map(v => v.score)\n        .reduce((a,b) => a + b, 0) > 0\n    }\n\n    const generateScores = (customer_name) => {\n        let tmp = {}\n        Object.keys(cardState).forEach(k => {\n            if (hasScore(cardState, k)) {\n                tmp[k] = {rows: {}}\n                Object.keys(cardState[k].rows).forEach(r => {\n                    let tmpScore = cardState[k].rows[r].score\n                    if(tmpScore > 0 && tmpScore < 6) {\n                        let tmpRow = {...cardState[k].rows[r]}\n                        tmpRow.score -=1\n                        tmp[k].rows[r] = {...tmpRow}\n                    }\n                })\n            }\n        })\n        return {cards: {...tmp}, customer: customer_name}\n    }\n\n    const setupState = (cards) => {\n        console.log(cards)\n        let tmp = {}\n        cards.forEach(c => {\n            let rowtmp = {}\n            c.rows.forEach(r => {\n                rowtmp[r.text] = {notes: '', score: 0}\n            })\n            tmp[c.title] = {rows: rowtmp}\n        })\n        setCardState({...tmp})\n    }\n\n    const updateRowScore = (cardKey, rowKey, val) => {\n        let tmp = {...cardState}\n        tmp[cardKey].rows[rowKey].score = val\n        setCardState({...tmp})\n    }\n\n    const updateRowNotes = (cardKey, rowKey, val) => {\n        let tmp = {...cardState}\n        tmp[cardKey].rows[rowKey].notes = val\n        setCardState({...tmp})\n    }\n\n    const contextValue = {\n        gClient,\n        loggedIn,\n        handleOAuthLogIn,\n        handleOauthLogOut,\n        cardState,\n        reviewType,\n        setReviewType,\n        generateScores: useMemo(() => generateScores, [cardState]),\n        updateRowScore,\n        updateRowNotes,\n        setupState: useMemo(() => setupState, [cardState])\n    }\n    return (\n        <AppContext.Provider value={contextValue}>\n            {props.children}\n        </AppContext.Provider>\n    )\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { AppContext } from './AppContext';\nimport { clickSettings } from './Constants'\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Text = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n  font-size: 14px;\n  line-height: 20px;\n  &:hover {\n    cursor: pointer;\n    background-color: rgb(245, 245, 245);\n  }\n`;\n\nconst ScoreBase = styled.span`\n  border-radius: 25px;\n  padding: 3px;\n`;\n\nconst Notes = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n`;\n\nconst Row = (props) => {\n  const { cardState, updateRowScore, updateRowNotes } = useContext(AppContext)\n  const [clicks, setClicks] = useState(0);\n  const [displayNotes, setDisplayNotes] = useState(null); \n\n  useEffect(() => {\n    if (cardState[props.card]) {\n      setDisplayNotes(cardState[props.card].rows[props.name.text].notes)\n      setClicks(cardState[props.card].rows[props.name.text].score)\n    }\n  }, [cardState[props.card]])\n\n  const setScore = (val) => {\n    setClicks(val)\n    updateRowScore(props.card, props.name.text, val)\n    props.calcScores(cardState[props.card].rows)\n  }\n\n  const setNotes = (val) => {\n    setDisplayNotes(val)\n    updateRowNotes(props.card, props.name.text, val)\n  }\n\n  const handleClick = () => {\n    let tmpScore = (clicks + 1) % 7\n    setScore(tmpScore)\n  };\n\n  const handleChange = (e) => {\n    setNotes(e.target.value);\n  };\n\n  let markdownLinks = /\\[([^\\]]+)\\]\\(([^)]+)\\)/gi;\n  let htmlLinks = '<a target=\"_blank\" href=\"$2\">$1</a>';\n  let notes = (<Notes><textarea onChange={handleChange} value={displayNotes} cols=\"69\" rows=\"3\" /></Notes>)\n  let text = (\n    <span dangerouslySetInnerHTML={{\n        __html: props.name.text.replace(markdownLinks, htmlLinks),\n      }}\n    ></span>\n  );\n\n  const displayScore = () => {\n    let data = clickSettings[Number(clicks)]\n    if (data) {\n      return (\n        <ScoreBase style={{backgroundColor: data.color}}>\n          <span aria-label=\"yes\" role=\"img\">&nbsp;{data.icon}</span>\n        </ScoreBase>\n      )\n    } \n    return (<></>)\n  }\n\n    return (\n      <div>\n        <Text\n          data-text={props.name.text}\n          onClick={handleClick}\n          key={props.name.index}\n          style={(clicks === 6) ? {backgroundColor: '#eee', textDecoration: 'line-through'} : {}}\n        >\n          {displayScore()} {text}\n        </Text>\n        {clicks >= 1 && notes}\n      </div>\n    );\n};\n\nRow.propTypes = {\n  name: PropTypes.any.isRequired, // eslint-disable-line\n};\n\nexport default Row;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { AppContext } from './AppContext';\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Row from \"./Row\";\n\nconst Div = styled.div`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst Container = styled.div`\n  margin: auto;\n  width: 600px;\n  max-width: 100%;\n  text-align: left;\n  background-color: #ffffff;\n  border-radius: 2px;\n  box-shadow: 0px 1px 1px 0 rgba(0, 0, 0, 0.3);\n`;\n\nconst Title = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst Remove = styled.div`\n  padding: 15px 15px;\n  float: right;\n  cursor: pointer;\n  color: #ddd;\n`;\n\nconst Score = styled.div`\n  float: right;\n  font-weight: normal;\n`;\n\nconst Super = styled.span`\n  font-size: 12px;\n  color: #bbb;\n  padding-left: 10px;\n`;\n\nexport const Card = (props) => {\n  const { cardState } = useContext(AppContext)\n  const [isHidden, setIsHidden] = useState(false)\n  const [isRemoved, setIsRemoved] = useState(false);\n  const [score, setScore] = useState(0);\n  const toggleHidden = () => {setIsHidden(!isHidden)};\n\n  useEffect(() => {\n    if (cardState[props.card]) {\n      calcScores(cardState[props.card].rows)\n    }\n  }, [cardState[props.card]])\n\n  const calcScores = (rows) => {\n    let total = Object.values(rows)\n      .filter(v => (v.score > 0 && v.score < 6))\n      .map(s => (s.score - 1))\n      .reduce((a,b) => a + b, 0)\n    setScore(total)\n  }\n\n  const remove = () => {\n    setIsRemoved(true);\n    setIsHidden(true);\n  };\n\n  let title = props.card.title;\n  let score_percent = Math.round(\n    (score / (props.card.rows.length * 4)) * 100\n  );\n  if (!isHidden) {\n    return (\n      <Div>\n        <Container>\n          <Title onClick={toggleHidden}>\n            <input type=\"checkbox\" readOnly checked={!isHidden} /> {title}{\" \"}\n            <Score>\n              {score_percent}%{\" \"}\n              <Super>\n                ({score}/{props.card.rows.length * 4})\n              </Super>\n            </Score>\n          </Title>\n          {props.card.rows.map((name, ix) => (\n            <Row\n              key={ix}\n              card={title}\n              name={name}\n              calcScores={calcScores}\n            ></Row>\n          ))}\n        </Container>\n      </Div>\n    );\n  } else if (!isRemoved) {\n    return (\n      <Div>\n        <Container>\n          <Remove onClick={remove} alt=\"Remove\">x</Remove>\n          <Title onClick={toggleHidden}>\n            <input type=\"checkbox\" readOnly checked={!isHidden} /> {title}\n          </Title>\n        </Container>\n      </Div>\n    );\n  } else {\n    return <Div></Div>;\n  }\n};\n\nCard.propTypes = {\n  card: PropTypes.any.isRequired, // eslint-disable-line\n};\n\n","import React, { useContext, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { GuruQuery, cardChoices } from \"./Constants\";\nimport { Card } from \"./Card\";\nimport styled from \"styled-components\";\nimport { AppContext } from \"./AppContext\";\n\nconst Tip = styled.span`\n  font-size: 11px;\n`;\nexport const CardList = () => {\n  const { reviewType, setReviewType, setupState } = useContext(AppContext);\n  const { loading, error, data } = useQuery(GuruQuery)\n\n  useEffect(() => {\n    if (data) {\n      setupState(data.cards)\n    }\n  }, [data])\n\n  const handleChange = (e) => {\n    setReviewType(e.target.value);\n  };\n  \n  if (error) {\n    return <p>{error.message}</p>;\n  } else if (loading) {\n    return (\n      <div>\n        <p>&nbsp;</p>\n        <p>Loading cards from Guru...</p>\n        <p>&nbsp;</p>\n      </div>\n        );\n    } else {\n      let includedCards = cardChoices[reviewType]?.included || [];\n      let cards = data.cards.filter(\n        (c) => includedCards.indexOf(c.title) !== -1\n      );\n      return (\n        <div>\n          <p>&nbsp;</p>\n          <label htmlFor=\"reviewType\">Section:</label>\n          <select id=\"reviewType\" value={reviewType} onChange={handleChange}>\n            {Object.keys(cardChoices).map((k) => (\n              <option key={k} value={k}>\n                {cardChoices[k].label}\n              </option>\n            ))}\n          </select>{\" \"}\n          <Tip>\n            Tip: remove cards you&rsquo;re not interested in by clicking the X\n          </Tip>\n          <p>&nbsp;</p>\n          <div>\n            {cards.map((card) => (\n              <Card key={card.title} card={card} />\n            ))}\n          </div>\n          <p>&nbsp;</p>\n        </div>\n      );\n    }\n  }\n","import React, { useContext } from 'react';\nimport { AppContext } from './AppContext';\nimport { urls } from './Constants'\nimport styled from 'styled-components';\nimport { GoogleLogout } from 'react-google-login';\n\nconst Clear = styled.span`\n  padding-left: 100px;\n`;\n\nconst ActionButtons = () => {\n  const { generateScores, gClient, handleOauthLogOut } = useContext(AppContext)\n  const clear = () => {\n    window.confirm(\"Are you sure you want to start over?\") && window.location.reload()\n  }\n\n  const generateForCustomer = async () => {\n    let cust = await prompt(\"Who is the customer?\")\n    return generateScores(cust)\n  }\n\n  const postGDocError = (msg) => {\n    window.alert('Problem communicating with Google Drive! Check the console')\n    console.error(msg)\n  }\n\n  const save = async () => {\n    let scores = await generateForCustomer()\n    let requestTokenHeaders = await gClient.getRequestHeaders()\n    let headers = {\n      ...requestTokenHeaders,\n      \"Content-type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n\n    try {\n      let r = await fetch('/api/generate', {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(scores)\n      })  \n      if (r.ok) {\n        let resp = await r.json()\n        if (resp.ok) {\n          let msg = 'All done, check the Transcriber Output folder. Do you want to clear?'\n          window.confirm(msg) && window.location.reload()\n          console.log(resp.msg)\n        } else {\n          postGDocError(resp.msg)\n        }\n        // TO DO - replace with a nice custom modal!\n      } else {postGDocError(r)}\n    } catch (e) {postGDocError(e)}\n  }\n    return (\n      <>\n        <div>\n            <input type=\"button\" onClick={save} value=\"Save to Google Doc\"/>&nbsp;&nbsp;\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={urls.gDrive}>Transcriber Output Location</a>\n            <Clear><input type=\"button\" onClick={clear} value=\"Clear\"/></Clear>\n            <p>&nbsp;</p>\n        </div>\n        <div>\n          <GoogleLogout\n            buttonText=\"Logout\"\n            onLogoutSuccess={handleOauthLogOut}\n            />\n        </div>\n        </>\n    )\n}\n\nexport default ActionButtons;","import React, { useContext } from 'react'\nimport { AppContext } from './AppContext'\nimport { GoogleLogin } from 'react-google-login';\nimport styled from 'styled-components'\nimport { authScopes } from './Constants'\n\nconst AuthCard = styled.div`\n  margin: auto;\n  padding: 20px;\n  width: 600px;\n  max-width: 100%;\n  text-align: left;\n  background-color: #ffffff;\n  border-radius: 2px;\n  box-shadow: 0px 1px 1px 0 rgba(0, 0, 0, 0.3);\n`;\n\n\nexport const Auth = () => {\n    const { handleOAuthLogIn, handleOauthLogOut } = useContext(AppContext)\n    return (\n        <AuthCard>\n            <h5 style={{marginBottom:'10px'}}>Authenticate with Google to view this Content</h5>\n            <GoogleLogin\n                clientId={process.env.REACT_APP_GCLIENT_ID}\n                buttonText=\"Login with Google\"\n                onSuccess={handleOAuthLogIn}\n                scope={authScopes.join(' ')}\n                onFailure={handleOauthLogOut}\n                cookiePolicy={'single_host_origin'}\n                />\n        </AuthCard>\n    )\n}","import React, { useContext, useEffect, useState } from \"react\";\nimport { CardList } from \"./components/CardList\";\nimport ActionButtons from \"./components/ActionButtons\";\nimport { logoImg, urls } from \"./components/Constants\";\nimport { AppContext, AppContextProvider } from \"./components/AppContext\";\nimport { Auth } from './components/Auth'\nimport Cookie from 'js-cookie'\nimport \"./App.css\";\n\nimport { ApolloClient, ApolloProvider } from \"@apollo/client\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: urls.graphQL }),\n  cache: new InMemoryCache(),\n});\n\nconst StyledWord = (props) => {\n  return (\n    <><span className=\"underline\">{props.text.slice(0,1)}</span>{props.text.slice(1,)}{\" \"}</>\n  )\n}\n\nconst AppInner = () => {\n  const { loggedIn } = useContext(AppContext)\n\n      {return loggedIn ? (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <img src={logoImg} className=\"App-logo\" alt=\"logo\" />\n            <h2>\n              <div className=\"tooltip\">\n                Transcriber\n                <span className=\"tooltiptext\">\n                  Transcriber{\" \"}\n                  <StyledWord text={'reproduces'}/>\n                  <StyledWord text={'analytical,'}/>\n                  <StyledWord text={'neat'}/>\n                  <StyledWord text={'similarly'}/>\n                  <StyledWord text={'comprehensive'}/>\n                  <StyledWord text={'reviews'}/>\n                  <StyledWord text={'incorporating'}/>\n                  <StyledWord text={'best practices'}/>\n                  <StyledWord text={'every'}/>\n                  <StyledWord text={'rendition'}/>\n                  </span>\n              </div>\n              &nbsp;helps you conduct different types of reviews and audits<br />\n              and is powered by content from this{\" \"}\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={urls.guru}>Guru board</a>&nbsp;&nbsp;&nbsp;<span className=\"version\">v0.1.5</span>\n            </h2>\n          </div>\n          <div className=\"App-User\">\n            <CardList />\n          </div>\n          <ActionButtons/>\n        </div>\n      </ApolloProvider>\n    ) : <Auth/> }\n}\n\nconst App = () => {\n  return (\n    <AppContextProvider><AppInner/></AppContextProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'reset-css/reset.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}